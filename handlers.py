import logging
import psutil
import os
import subprocess
import zipfile
import py7zr
import rarfile
import socket
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

SUPPORTED_TEXT_FORMATS = (".txt", ".json", ".ini", ".log", ".md")
AUTHORIZED_USER_ID = 812761972

logger = logging.getLogger(__name__)

cut_buffer = None
copy_buffer = None

def is_program_running(program_name):
    for proc in psutil.process_iter(['pid', 'name']):
        if program_name.lower() in proc.info['name'].lower():
            return True
    return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞."""
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
    [InlineKeyboardButton("Help", callback_data='/help')],
    [InlineKeyboardButton("Status", callback_data='/status')],
    [InlineKeyboardButton("Take Screenshot", callback_data='/screenshot')],
    [InlineKeyboardButton("–û–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏", callback_data='show_file_operations_menu')],
    [InlineKeyboardButton("–ù–∞–π—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å", callback_data='/find_process')],
    [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É", callback_data='/open')],
    [InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É", callback_data='/close')],
    [InlineKeyboardButton("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data='/copy_text')],
    [InlineKeyboardButton("–í—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data='/paste_text')],
    [InlineKeyboardButton("–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤", callback_data='/list_files')],
    [InlineKeyboardButton("–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞", callback_data='/search')],
    [InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–∞", callback_data='/view_file')],
    [InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª", callback_data='/send_file')],
    [InlineKeyboardButton("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª", callback_data='/copy_file')],
    [InlineKeyboardButton("–í—ã—Ä–µ–∑–∞—Ç—å —Ñ–∞–π–ª", callback_data='/cut_file')],
    [InlineKeyboardButton("–í—Å—Ç–∞–≤–∏—Ç—å —Ñ–∞–π–ª", callback_data='/paste_file')],
    [InlineKeyboardButton("–°–æ—Å—Ç–æ—è–Ω–∏–µ –±—É—Ñ–µ—Ä–∞", callback_data='/clipboard_status')],
    [InlineKeyboardButton("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞", callback_data='/restart')],
    [InlineKeyboardButton("–í—ã–∫–ª—é—á–µ–Ω–∏–µ", callback_data='/shutdown')],
    [InlineKeyboardButton("–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data='/archive')],
    [InlineKeyboardButton("–†–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å", callback_data='/extract')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∏–º –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º.\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:",
        reply_markup=reply_markup
    )

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {update}: {context.error}")

async def safe_reply(update: Update, text: str):
    if update.callback_query:
        await update.callback_query.message.reply_text(text)
    elif update.message:
        await update.message.reply_text(text)
    else:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø update.")

async def system_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != AUTHORIZED_USER_ID:
        logger.warning(f"Unauthorized user {update.effective_user.id} tried to use the bot.")
        return
    logger.info(f"User {update.effective_user.id} started the bot.")
    keyboard = [
        [InlineKeyboardButton("Help", callback_data='/help')],
        [InlineKeyboardButton("Status", callback_data='/status')],
        [InlineKeyboardButton("Take Screenshot", callback_data='/screenshot')],
        [InlineKeyboardButton("–û–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏", callback_data='show_file_operations_menu')],
        [InlineKeyboardButton("–ü—Ä–æ—Ü–µ—Å—Å—ã (–ø–æ CPU)", callback_data='proc_cpu')],
        [InlineKeyboardButton("–ü—Ä–æ—Ü–µ—Å—Å—ã (–ø–æ –ø–∞–º—è—Ç–∏)", callback_data='proc_mem')],
        [InlineKeyboardButton("–ò–Ω—Ñ–æ –æ —Å–µ—Ç–∏", callback_data='network_info')],
        [InlineKeyboardButton("Clipboard Status", callback_data='/clipboard_status')],
        [InlineKeyboardButton("Restart", callback_data='/restart')],
        [InlineKeyboardButton("Shutdown", callback_data='/shutdown')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=reply_markup)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != AUTHORIZED_USER_ID:
        logger.warning(f"Unauthorized user {update.effective_user.id} tried to use the help command.")
        return
    logger.info(f"User {update.effective_user.id} requested help.")
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/help - –ü–æ–º–æ—â—å\n"
        "/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
        "/find_process <–∏–º—è> - –ù–∞–π—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å\n"
        "/screenshot - –°–∫—Ä–∏–Ω—à–æ—Ç\n"
        "/open <–ø—Ä–æ–≥—Ä–∞–º–º–∞> - –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É\n"
        "/copy_text <—Ç–µ–∫—Å—Ç> - –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç\n"
        "/paste_text - –í—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç\n"
        "/list_files <–ø—É—Ç—å> - –§–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏\n"
        "/search <–ø—É—Ç—å> <—à–∞–±–ª–æ–Ω> - –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤\n"
        "/view_file <–ø—É—Ç—å> - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–∞\n"
        "/send_file <–ø—É—Ç—å> - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª\n"
        "/copy_file <—Ñ–∞–π–ª> - –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª\n"
        "/cut_file <—Ñ–∞–π–ª> - –í—ã—Ä–µ–∑–∞—Ç—å —Ñ–∞–π–ª\n"
        "/paste_file <–ø–∞–ø–∫–∞> - –í—Å—Ç–∞–≤–∏—Ç—å —Ñ–∞–π–ª\n"
        "/clipboard_status - –°–æ—Å—Ç–æ—è–Ω–∏–µ –±—É—Ñ–µ—Ä–∞\n"
        "/restart - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞\n"
        "/shutdown - –í—ã–∫–ª—é—á–µ–Ω–∏–µ"
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –≤—ã–∑–æ–≤–∞
    if update.message:
        await update.message.reply_text(help_text)
    elif update.callback_query:
        await update.callback_query.message.reply_text(help_text)

async def system_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.info(f"User {user_id} requested system status.")

    cpu_usage = psutil.cpu_percent(interval=1)
    memory = psutil.virtual_memory()
    disk = psutil.disk_usage("/")

    status_message = (
        f"üñ• –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:\n\n"
        f"üîß –ó–∞–≥—Ä—É–∑–∫–∞ CPU: {cpu_usage}%\n"
        f"üß† –ü–∞–º—è—Ç—å: {memory.percent}% ({memory.used // (1024**2)} MB –∏–∑ {memory.total // (1024**2)} MB)\n"
        f"üíæ –î–∏—Å–∫: {disk.percent}% ({disk.used // (1024**3)} GB –∏–∑ {disk.total // (1024**3)} GB)"
    )

    await safe_reply(update, status_message)

# –ê—Ä—Ö–∏–≤–∞—Ü–∏—è
def archive_file_zip(source_path: str, archive_path: str):
    try:
        with zipfile.ZipFile(archive_path, 'w') as archive:
            archive.write(source_path, arcname=os.path.basename(source_path))
        logger.info(f"ZIP-–∞—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: {archive_path}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ ZIP: {e}")

def archive_file_7z(source_path: str, archive_path: str):
    try:
        with py7zr.SevenZipFile(archive_path, 'w') as archive:
            archive.write(source_path, arcname=os.path.basename(source_path))
        logger.info(f"7z-–∞—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: {archive_path}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ 7z: {e}")

def archive_file_rar(source_path: str, archive_path: str):
    try:
        rarfile.PATH_SEP = '\\'
        os.system(f"rar a -ep1 {archive_path} {source_path}")
        logger.info(f"RAR-–∞—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: {archive_path}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ RAR: {e}")

async def ask_archive_format(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("ZIP", callback_data="archive_zip"),
            InlineKeyboardButton("7Z", callback_data="archive_7z"),
            InlineKeyboardButton("RAR", callback_data="archive_rar")
        ]
    ]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏:", reply_markup=InlineKeyboardMarkup(keyboard))

async def archive_format_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["archive_format"] = query.data.split("_")[1]  # zip / 7z / rar
    await query.edit_message_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å.")

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        doc = update.message.document
        if not doc:
            await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª.")
            return

        file_path = f"downloads/{doc.file_name}"
        os.makedirs("downloads", exist_ok=True)
        await doc.get_file().download_to_drive(file_path)

        format_ = context.user_data.get("archive_format")
        if not format_:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥–æ–π /archive.")
            return

        archive_path = file_path + f".{format_}"
        if format_ == "zip":
            archive_file_zip(file_path, archive_path)
        elif format_ == "7z":
            archive_file_7z(file_path, archive_path)
        elif format_ == "rar":
            archive_file_rar(file_path, archive_path)

        with open(archive_path, "rb") as f:
            await update.message.reply_document(f, filename=os.path.basename(archive_path))

    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}")

# –†–∞–∑–∞—Ä—Ö–∏–≤–∞—Ü–∏—è
def extract_zip(archive_path: str, extract_to: str):
    try:
        with zipfile.ZipFile(archive_path, 'r') as archive:
            archive.extractall(extract_to)
        logger.info(f"ZIP-–∞—Ä—Ö–∏–≤ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω –≤: {extract_to}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–µ ZIP: {e}")

def extract_7z(archive_path: str, extract_to: str):
    try:
        with py7zr.SevenZipFile(archive_path, 'r') as archive:
            archive.extractall(path=extract_to)
        logger.info(f"7z-–∞—Ä—Ö–∏–≤ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω –≤: {extract_to}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–µ 7z: {e}")

def extract_rar(archive_path: str, extract_to: str):
    try:
        with rarfile.RarFile(archive_path, 'r') as archive:
            archive.extractall(path=extract_to)
        logger.info(f"RAR-–∞—Ä—Ö–∏–≤ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω –≤: {extract_to}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–µ RAR: {e}")

async def ask_extract_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ZIP, RAR –∏–ª–∏ 7Z –∞—Ä—Ö–∏–≤ –¥–ª—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏.")

async def handle_archive_upload(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        doc = update.message.document
        filename = doc.file_name.lower()
        file_path = f"downloads/{doc.file_name}"
        extract_to = "extracted/"

        os.makedirs("downloads", exist_ok=True)
        os.makedirs(extract_to, exist_ok=True)
        await doc.get_file().download_to_drive(file_path)

        if filename.endswith(".zip"):
            extract_zip(file_path, extract_to)
        elif filename.endswith(".7z"):
            extract_7z(file_path, extract_to)
        elif filename.endswith(".rar"):
            extract_rar(file_path, extract_to)
        else:
            await update.message.reply_text("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—Ä—Ö–∏–≤–∞.")
            return
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—Ä—Ö–∏–≤–∞: {str(e)}")

    # –û—Ç–ø—Ä–∞–≤–∏–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    files = os.listdir(extract_to)
    if files:
        msg = "–†–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:\n" + "\n".join(files[:10])
        await update.message.reply_text(msg)
    else:
        await update.message.reply_text("–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

# –¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
def get_sorted_processes(sort_by="cpu", limit=10):
    processes = []
    for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_info']):
        try:
            processes.append(proc.info)
        except psutil.NoSuchProcess:
            continue

    key = 'cpu_percent' if sort_by == 'cpu' else 'memory_info'
    sorted_procs = sorted(processes, key=lambda x: x.get(key, 0), reverse=True)

    result = ""
    for proc in sorted_procs[:limit]:
        mem = proc['memory_info'].rss / 1024 / 1024 if proc.get('memory_info') else 0
        result += f"PID: {proc['pid']} | Name: {proc['name']} | CPU: {proc['cpu_percent']}% | RAM: {mem:.2f} MB\n"

    logger.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ {sort_by.upper()}")
    return result or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö."

# –ò–Ω—Ñ–æ –æ —Å–µ—Ç–∏
def get_network_info():
    try:
        hostname = socket.gethostname()
        ip = socket.gethostbyname(hostname)

        output = subprocess.check_output("netsh wlan show interfaces", shell=True, encoding='cp866')
        ssid = signal = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        for line in output.splitlines():
            if "SSID" in line and "BSSID" not in line:
                ssid = line.split(":", 1)[1].strip()
            elif "Signal" in line:
                signal = line.split(":", 1)[1].strip()

        logger.info("–°–µ—Ç–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã")
        return f"–ò–º—è —Ö–æ—Å—Ç–∞: {hostname}\nIP-–∞–¥—Ä–µ—Å: {ip}\nWi-Fi: {ssid}\n–£—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞: {signal}"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Ç–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Wi-Fi –∏–Ω—Ñ—ã: {e}"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def system_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'proc_cpu':
        result = get_sorted_processes("cpu")
        await query.edit_message_text(f"üîß –¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ CPU:\n\n{result}")
    elif query.data == 'proc_mem':
        result = get_sorted_processes("mem")
        await query.edit_message_text(f"üß† –¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ –ø–∞–º—è—Ç–∏:\n\n{result}")
    elif query.data == 'network_info':
        result = get_network_info()
        await query.edit_message_text(f"üåê –°–µ—Ç–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n{result}")

async def find_process(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != AUTHORIZED_USER_ID:
        return
    name = ' '.join(context.args)
    if not name:
        await update.message.reply_text("–ü—Ä–∏–º–µ—Ä: /find_process chrome")
        return
    found = [p.info['name'] for p in psutil.process_iter(['name']) if name.lower() in p.info['name'].lower()]
    await update.message.reply_text('\n'.join(found) if found else "–ü—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    logger.info(f"find_process called with arguments: {context.args}")

async def take_screenshot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != AUTHORIZED_USER_ID:
        logger.warning(f"Unauthorized user {update.effective_user.id} tried to take a screenshot.")
        return
    logger.info(f"User {update.effective_user.id} requested a screenshot.")
    screenshot = pyautogui.screenshot()
    byte_io = io.BytesIO()
    screenshot.save(byte_io, format='PNG')
    byte_io.seek(0)
    await update.message.reply_photo(byte_io)

async def show_file_operations_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if update.message:
        keyboard = [
            [InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª", callback_data='send_file')],
            [InlineKeyboardButton("–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª", callback_data='copy_file')],
            [InlineKeyboardButton("–í—Å—Ç–∞–≤–∏—Ç—å —Ñ–∞–π–ª", callback_data='paste_file')],
            [InlineKeyboardButton("–í—ã—Ä–µ–∑–∞—Ç—å —Ñ–∞–π–ª", callback_data='cut_file')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é —Å —Ñ–∞–π–ª–æ–º:", reply_markup=reply_markup)
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é —Å —Ñ–∞–π–ª–æ–º.")
    elif update.callback_query:
        # –ï—Å–ª–∏ —ç—Ç–æ callback_query (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –∫–Ω–æ–ø–∫–∏)
        keyboard = [
            [InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª", callback_data='send_file')],
            [InlineKeyboardButton("–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª", callback_data='copy_file')],
            [InlineKeyboardButton("–í—Å—Ç–∞–≤–∏—Ç—å —Ñ–∞–π–ª", callback_data='paste_file')],
            [InlineKeyboardButton("–í—ã—Ä–µ–∑–∞—Ç—å —Ñ–∞–π–ª", callback_data='cut_file')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é —Å —Ñ–∞–π–ª–æ–º:", reply_markup=reply_markup)
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é —Å —Ñ–∞–π–ª–æ–º —á–µ—Ä–µ–∑ callback.")

# –õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
async def send_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file_path = "–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É"  # –ù–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø—É—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        with open(file_path, 'rb') as file:
            await update.message.reply_document(file)
        logger.info(f"–§–∞–π–ª {file_path} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")

# –õ–æ–≥–∏–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
async def copy_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    source_path = "–ø—É—Ç—å_–∫_–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É_—Ñ–∞–π–ª—É"
    destination_path = "–ø—É—Ç—å_–∫_–º–µ—Å—Ç—É_–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"
    try:
        shutil.copy(source_path, destination_path)
        logger.info(f"–§–∞–π–ª {source_path} —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ {destination_path}.")
        await update.message.reply_text("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {source_path} –≤ {destination_path}: {e}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

# –õ–æ–≥–∏–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ –∏–ª–∏ –ø–∞–ø–∫–∏)
async def paste_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    source_path = "–ø—É—Ç—å_–∫_–≤—Å—Ç–∞–≤–ª—è–µ–º–æ–º—É_—Ñ–∞–π–ª—É"
    destination_path = "–ø—É—Ç—å_–∫_–º–µ—Å—Ç—É_–≤—Å—Ç–∞–≤–∫–∏"
    try:
        shutil.copy(source_path, destination_path)
        logger.info(f"–§–∞–π–ª {source_path} —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω –≤ {destination_path}.")
        await update.message.reply_text("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {source_path} –≤ {destination_path}: {e}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")

# –õ–æ–≥–∏–∫–∞ –≤—ã—Ä–µ–∑–∞–Ω–∏—è —Ñ–∞–π–ª–∞
async def cut_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    source_path = "–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É"
    destination_path = "–ø—É—Ç—å_–∫_–º–µ—Å—Ç—É_–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è"
    try:
        shutil.move(source_path, destination_path)
        logger.info(f"–§–∞–π–ª {source_path} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ {destination_path}.")
        await update.message.reply_text("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {source_path} –≤ {destination_path}: {e}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

async def open_program(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != AUTHORIZED_USER_ID:
        logger.warning(f"Unauthorized user {update.effective_user.id} tried to open a program.")
        return
    logger.info(f"User {update.effective_user.id} requested to open a program.")
    program = ' '.join(context.args)
    if not program:
        await update.message.reply_text("–ü—Ä–∏–º–µ—Ä: /open notepad.exe –∏–ª–∏ /open C:/Path/To/App.exe")
        return
    try:
        subprocess.Popen(program)
        await update.message.reply_text(f"–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–ø—É—â–µ–Ω–∞: {program}")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        logger.error(f"Error starting program {program}: {e}")

async def close_program(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != AUTHORIZED_USER_ID:
        logger.warning(f"Unauthorized user {update.effective_user.id} tried to close a program.")
        return
    if len(context.args) < 1:
        await update.message.reply_text("–ü—Ä–∏–º–µ—Ä: /close chrome")
        return
    process_name = ' '.join(context.args)
    found_process = None

    for proc in psutil.process_iter(['pid', 'name']):
        if process_name.lower() in proc.info['name'].lower():
            found_process = proc
            break
    
    if found_process:
        try:
            found_process.terminate()  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            await update.message.reply_text(f"–ü—Ä–æ—Ü–µ—Å—Å {process_name} –∑–∞–≤–µ—Ä—à–µ–Ω.")
            logger.info(f"User {update.effective_user.id} closed process {process_name}.")
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
            logger.error(f"Error closing process {process_name}: {e}")
    else:
        await update.message.reply_text(f"–ü—Ä–æ—Ü–µ—Å—Å {process_name} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

async def copy_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != AUTHORIZED_USER_ID:
        logger.warning(f"Unauthorized user {update.effective_user.id} tried to copy text.")
        return
    if len(context.args) < 1:
        await update.message.reply_text("–ü—Ä–∏–º–µ—Ä: /copy_text Hello World")
        return
    text = ' '.join(context.args)
    pyperclip.copy(text)
    await update.message.reply_text(f"–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {text}")
    logger.info(f"User {update.effective_user.id} copied text: {text}")

async def paste_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != AUTHORIZED_USER_ID:
        logger.warning(f"Unauthorized user {update.effective_user.id} tried to paste text.")
        return
    text = pyperclip.paste()
    await update.message.reply_text(f"–¢–µ–∫—Å—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞: {text}")
    logger.info(f"User {update.effective_user.id} pasted text: {text}")

async def search_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != AUTHORIZED_USER_ID:
        logger.warning(f"Unauthorized user {update.effective_user.id} tried to search for files.")
        return
    path = context.args[0] if context.args else ""
    pattern = context.args[1] if len(context.args) > 1 else ""
    if not path or not pattern:
        await update.message.reply_text("–ü—Ä–∏–º–µ—Ä: /search C:/Path/To/Directory *.txt")
        return
    matching_files = []
    for root, dirs, files in os.walk(path):
        for file in files:
            if fnmatch.fnmatch(file, pattern):
                matching_files.append(os.path.join(root, file))
    if matching_files:
        await update.message.reply_text("\n".join(matching_files))
    else:
        await update.message.reply_text("–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

async def view_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if update.effective_user.id != AUTHORIZED_USER_ID:
            logger.warning(f"Unauthorized user {update.effective_user.id} tried to view file.")
            return

        if not context.args:
            await update.message.reply_text("–£–∫–∞–∂–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/viewfile C:\\Users\\file.txt")
            return

        file_path = " ".join(context.args)

        if not os.path.isfile(file_path):
            await update.message.reply_text("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        ext = os.path.splitext(file_path)[1].lower()
        if ext not in SUPPORTED_TEXT_FORMATS:
            await update.message.reply_text("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .txt, .json, .ini –∏ –ø–æ—Ö–æ–∂–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã.")
            return

        with open(file_path, "r", encoding="utf-8") as f:
            content = f.read(4096)  # –æ–≥—Ä–∞–Ω–∏—á–∏–º –¥–æ 4 KB
            if ext == ".json":
                parsed = json.loads(content)
                content = json.dumps(parsed, indent=2, ensure_ascii=False)
            elif ext == ".ini":
                config = configparser.ConfigParser()
                config.read_string(content)
                content = "\n".join(f"[{section}]\n" + "\n".join(f"{k} = {v}" for k, v in config[section].items()) for section in config.sections())

        await update.message.reply_text(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:\n\n{content}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:\n{e}")

async def list_files(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if update.effective_user.id != AUTHORIZED_USER_ID:
            logger.warning(f"Unauthorized user {update.effective_user.id} tried to list files.")
            return
        if len(context.args) < 1:
            await update.message.reply_text("–ü—Ä–∏–º–µ—Ä: /list_files C:/path/to/directory")
            return
        directory = ' '.join(context.args)
        if os.path.isdir(directory):
            files = os.listdir(directory)
            file_list = '\n'.join(files) if files else "–ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞."
            await update.message.reply_text(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ {directory}:\n{file_list}")
            logger.info(f"User {update.effective_user.id} listed files in {directory}.")
        else:
            await update.message.reply_text(f"–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {directory}")
    
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–ø–∫–∏: {e}")
        logger.error(f"Error listing files in {directory}: {e}")

async def clipboard_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if update.effective_user.id != AUTHORIZED_USER_ID:
            logger.warning(f"Unauthorized user {update.effective_user.id} tried to check clipboard status.")
            return

        clipboard_content = pyperclip.paste()
        message_text = (
            f"–¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –±—É—Ñ–µ—Ä–µ –æ–±–º–µ–Ω–∞:\n{clipboard_content}"
            if clipboard_content else
            "–ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –ø—É—Å—Ç."
        )

        if update.callback_query:
            await update.callback_query.message.reply_text(message_text)
        elif update.message:
            await update.message.reply_text(message_text)

        logger.info(f"User {update.effective_user.id} checked clipboard content: {'non-empty' if clipboard_content else 'empty'}.")
    
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞: {e}")
        logger.error(f"Error checking clipboard status: {e}")

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if update.effective_user.id != AUTHORIZED_USER_ID:
            logger.warning(f"Unauthorized user {update.effective_user.id} tried to restart.")
            return

        if update.callback_query:
            await update.callback_query.message.reply_text("–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
        elif update.message:
            await update.message.reply_text("–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞.")

        logger.info("System restart initiated.")
        os.system("shutdown /r /t 5")
    
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å–∏—Å—Ç–µ–º—ã: {e}")
        logger.error(f"Error initiating system restart: {e}")

async def shutdown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if update.effective_user.id != AUTHORIZED_USER_ID:
            logger.warning(f"Unauthorized user {update.effective_user.id} tried to shutdown.")
            return

        if update.callback_query:
            await update.callback_query.message.reply_text("–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω–∞.")
        elif update.message:
            await update.message.reply_text("–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω–∞.")

        logger.info("System shutdown initiated.")
        os.system("shutdown /s /t 5")
    
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
        logger.error(f"Error initiating system shutdown: {e}")

# --- –î–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥ –¥–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫ –≤—ã–∑–æ–≤–∞ ---

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        command = query.data
        await query.answer()

        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if command == '/help':
            logger.info(f"User {update.effective_user.id} pressed the 'Help' button.")
            await help_command(update, context)
        elif command == '/status':
            logger.info(f"User {update.effective_user.id} pressed the 'Status' button.")
            await system_status(update, context)
        elif command == '/screenshot':
            logger.info(f"User {update.effective_user.id} pressed the 'Screenshot' button.")
            await take_screenshot(update, context)
        elif command == '/paste_text':
            logger.info(f"User {update.effective_user.id} pressed the 'Paste Text' button.")
            await paste_text(update, context)
        elif command == '/clipboard_status':
            logger.info(f"User {update.effective_user.id} pressed the 'Clipboard Status' button.")
            await clipboard_status(update, context)
        elif command == '/restart':
            logger.info(f"User {update.effective_user.id} pressed the 'Restart' button.")
            await restart(update, context)
        elif command == '/shutdown':
            logger.info(f"User {update.effective_user.id} pressed the 'Shutdown' button.")
            await shutdown(update, context)

        # –ú–µ–Ω—é –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ñ–∞–π–ª–∞–º–∏
        elif command == 'show_file_operations_menu':
            await show_file_operations_menu(update, context)
        elif command == 'send_file':
            await send_file(update, context)
        elif command == 'copy_file':
            await copy_file(update, context)
        elif command == 'paste_file':
            await paste_file(update, context)
        elif command == 'cut_file':
            await cut_file(update, context)

        # –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞–∑–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ
        elif command.startswith('archive_'):
            logger.info(f"User {update.effective_user.id} selected archive format: {command}")
            await archive_format_callback(update, context)
        elif command == 'extract_file':
            logger.info(f"User {update.effective_user.id} selected to extract file.")
            await ask_extract_file(update, context)

    except Exception as e:
        logger.error(f"Error processing button click: {e}")
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ `message`, –∏–Ω–∞—á–µ fallback
        try:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {e}")
        except:
            await query.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {e}")